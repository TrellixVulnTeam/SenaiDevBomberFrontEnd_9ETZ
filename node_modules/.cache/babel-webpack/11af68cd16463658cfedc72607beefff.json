{"ast":null,"code":"import _asyncToGenerator from \"/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiUrl}/login`;\n  }\n\n  createToken(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const authentication = yield _this.http.post(_this.url, request).toPromise();\n\n      _this.storeToken(authentication);\n\n      _this.saveUser(authentication.bombeiro);\n\n      return authentication;\n    })();\n  }\n\n  isAdmin(bombeiro) {\n    return bombeiro.perfilAcesso == 'ADMIN';\n  }\n\n  isMonitor(bombeiro) {\n    return bombeiro.perfilAcesso == 'VISITANTE';\n  }\n\n  isLogged() {\n    if (this.getStoredToken()) return true;else return false;\n  }\n\n  saveUser(bombeiros) {\n    localStorage.setItem('bombeiros', JSON.stringify(bombeiros));\n  }\n\n  getUser() {\n    try {\n      const str = localStorage.getItem('bombeiro');\n      if (!str) return {};\n      return JSON.parse(str);\n    } catch (err) {\n      return {};\n    }\n  }\n\n  storeToken(response) {\n    localStorage.setItem('token', JSON.stringify(response));\n  }\n\n  getStoredToken() {\n    try {\n      const str = localStorage.getItem('token');\n      if (!str) return undefined;\n      return JSON.parse(str);\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/auth/auth.service.ts"],"names":[],"mappings":";AAGA,SAAS,WAAT,QAA4B,8BAA5B;;;AAOA,OAAM,MAAO,WAAP,CAAkB;AAEtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAEpB,SAAA,GAAA,GAAM,GAAG,WAAW,CAAC,MAAM,QAA3B;AAFwC;;AAKjC,EAAA,WAAW,CAAC,OAAD,EAAoB;AAAA;;AAAA;AAEpC,YAAM,cAAc,SAAS,KAAI,CAAC,IAAL,CAAU,IAAV,CAAsB,KAAI,CAAC,GAA3B,EAAgC,OAAhC,EAAyC,SAAzC,EAA7B;;AAEG,MAAA,KAAI,CAAC,UAAL,CAAgB,cAAhB;;AACA,MAAA,KAAI,CAAC,QAAL,CAAc,cAAc,CAAC,QAA7B;;AAEF,aAAO,cAAP;AAPmC;AAQpC;;AAED,EAAA,OAAO,CAAC,QAAD,EAAmB;AACxB,WAAO,QAAQ,CAAC,YAAT,IAAyB,OAAhC;AACD;;AAED,EAAA,SAAS,CAAC,QAAD,EAAmB;AAC1B,WAAO,QAAQ,CAAC,YAAT,IAAyB,WAAhC;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,QAAI,KAAK,cAAL,EAAJ,EAA2B,OAAO,IAAP,CAA3B,KACK,OAAO,KAAP;AACN;;AAED,EAAA,QAAQ,CAAC,SAAD,EAAoB;AAC3B,IAAA,YAAY,CAAC,OAAb,CAAqB,WAArB,EAAkC,IAAI,CAAC,SAAL,CAAe,SAAf,CAAlC;AACA;;AAED,EAAA,OAAO,GAAA;AACL,QAAI;AACF,YAAM,GAAG,GAAG,YAAY,CAAC,OAAb,CAAqB,UAArB,CAAZ;AACA,UAAI,CAAC,GAAL,EAAU,OAAO,EAAP;AACV,aAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD,KAJD,CAIE,OAAO,GAAP,EAAY;AACZ,aAAO,EAAP;AACD;AACF;;AAED,EAAA,UAAU,CAAC,QAAD,EAAgB;AACzB,IAAA,YAAY,CAAC,OAAb,CAAqB,OAArB,EAA8B,IAAI,CAAC,SAAL,CAAe,QAAf,CAA9B;AAEA;;AAGD,EAAA,cAAc,GAAA;AACZ,QAAI;AACF,YAAM,GAAG,GAAG,YAAY,CAAC,OAAb,CAAqB,OAArB,CAAZ;AACA,UAAI,CAAC,GAAL,EAAU,OAAO,SAAP;AACV,aAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD,KAJD,CAIE,OAAO,GAAP,EAAY;AACb,aAAO,SAAP;AACA;AACF;;AAED,EAAA,MAAM,GAAA;AACJ,IAAA,YAAY,CAAC,UAAb,CAAwB,OAAxB;AACD,IAAA,YAAY,CAAC,UAAb,CAAwB,MAAxB;AACA;;AA/DoB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Token } from 'src/app/models/Token';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { bombeiro } from '../models/bombeiro';\nimport { JwtRequest } from '../models/JwtRequest';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) {}\n\n  url = `${environment.apiUrl}/login`;\n  \n    \n   async createToken(request: JwtRequest) {\n    \n    const authentication = await this.http.post<Token>(this.url, request).toPromise();\n\n       this.storeToken(authentication);\n       this.saveUser(authentication.bombeiro);\n\n     return authentication;\n   }\n\n   isAdmin(bombeiro: bombeiro) {\n     return bombeiro.perfilAcesso == 'ADMIN';\n   }\n\n   isMonitor(bombeiro: bombeiro) {\n     return bombeiro.perfilAcesso == 'VISITANTE';\n   }\n\n   isLogged() {\n     if (this.getStoredToken()) return true;\n     else return false;\n   }\n\n   saveUser(bombeiros: bombeiro) {\n    localStorage.setItem('bombeiros', JSON.stringify(bombeiros));\n   }\n\n   getUser(): bombeiro {\n     try {\n       const str = localStorage.getItem('bombeiro');\n       if (!str) return {} as bombeiro;\n       return JSON.parse(str) as bombeiro;\n     } catch (err) {\n       return {} as bombeiro;\n     }\n   }\n\n   storeToken(response: Token) {\n    localStorage.setItem('token', JSON.stringify(response));\n  \n   }\n     \n\n   getStoredToken() {\n     try {\n       const str = localStorage.getItem('token');\n       if (!str) return undefined;\n       return JSON.parse(str) as Token;\n     } catch (err) {\n      return undefined;\n     }\n   }\n\n   logout() {\n     localStorage.removeItem('token');\n    localStorage.removeItem('user');\n   }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}