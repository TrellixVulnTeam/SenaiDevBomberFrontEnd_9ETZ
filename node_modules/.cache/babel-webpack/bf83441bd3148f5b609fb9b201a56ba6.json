{"ast":null,"code":"import _asyncToGenerator from \"/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { XYZ, Cluster, Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport * as Proj from 'ol/proj.js'; //Converter cordenadas para lat e long\n\nimport 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport { Circle as CircleStyle, Fill, Stroke, Style, Text } from 'ol/style';\nimport { boundingExtent } from 'ol/extent';\nimport { Overlay } from 'ol';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/usuario.service\";\nconst _c0 = [\"popup\"];\nexport class TelaMapaComponent {\n  constructor(usuarioService) {\n    this.usuarioService = usuarioService;\n    this.display = \"none\";\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.pontos = yield _this.usuarioService.list();\n      _this.overlay = new Overlay({\n        element: _this.popup.nativeElement\n      });\n\n      const map = _this.MapaCreate();\n\n      const cluster = _this.cluster();\n\n      map.addLayer(cluster);\n\n      _this.cliqueEventMapa(map, cluster);\n    })();\n  }\n\n  cliqueEventMapa(map, cluster) {\n    map.on('click', evento => {\n      this.display = 'none';\n      cluster.getFeatures(evento.pixel).then(clickedFeatures => {\n        if (clickedFeatures.length) {\n          const features = clickedFeatures[0].get('features');\n\n          if (features.length > 1) {\n            const extent = boundingExtent(features.map(r => r.getGeometry().getCoordinates()));\n            map.getView().fit(extent, {\n              duration: 1000,\n              padding: [50, 50, 50, 50]\n            });\n          } else if (features.length == 1 && this.display == 'none') {\n            this.clicado = features[0].get('mangueiras');\n            this.display = 'block', this.overlay.setPosition(evento.coordinate);\n          }\n        }\n      });\n    });\n  }\n\n  MapaCreate() {\n    const latitude = -48.613666;\n    const longitude = -27.595115;\n    const raster = new TileLayer({\n      source: new XYZ({\n        url: 'https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}'\n      })\n    });\n    const map = new Map({\n      layers: [raster],\n      target: 'map',\n      overlays: [this.overlay],\n      view: new View({\n        center: Proj.fromLonLat([latitude, longitude]),\n        zoom: 14\n      })\n    });\n    return map;\n  }\n\n  cluster() {\n    const features = [];\n\n    for (let i = 0; i < this.pontos.length; ++i) {\n      const ponto = Proj.fromLonLat([this.pontos[i].longitude, this.pontos[i].latitude]);\n      const f = new Feature(new Point(ponto));\n      f.set('mangueira', this.pontos[i]), features.push(f);\n      features[i] = new Feature(new Point(ponto));\n    }\n\n    const source = new VectorSource({\n      features: features\n    });\n    const clusterSource = new Cluster({\n      distance: 80,\n      source: source\n    });\n    const styleCache = {};\n    const clusters = new VectorLayer({\n      source: clusterSource,\n      style: function (feature) {\n        const size = feature.get('features').length;\n        let style = styleCache[size];\n\n        if (!style) {\n          style = new Style({\n            image: new CircleStyle({\n              radius: 14,\n              stroke: new Stroke({\n                color: '#ff0000'\n              }),\n              fill: new Fill({\n                color: '#ff0000'\n              })\n            }),\n            text: new Text({\n              text: size.toString(),\n              fill: new Fill({\n                color: '#fff'\n              }),\n              scale: 1.3\n            })\n          });\n          styleCache[size] = style;\n        }\n\n        return style;\n      }\n    });\n    return clusters;\n  }\n\n}\n\nTelaMapaComponent.ɵfac = function TelaMapaComponent_Factory(t) {\n  return new (t || TelaMapaComponent)(i0.ɵɵdirectiveInject(i1.UsuarioService));\n};\n\nTelaMapaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TelaMapaComponent,\n  selectors: [[\"app-tela-mapa\"]],\n  viewQuery: function TelaMapaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popup = _t.first);\n    }\n  },\n  decls: 11,\n  vars: 4,\n  consts: [[1, \"mapaEntrada\"], [1, \"popup\"], [\"popup\", \"\"], [\"id\", \"map\", 1, \"mapa01\"]],\n  template: function TelaMapaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1, 2);\n      i0.ɵɵelementStart(3, \"p\");\n      i0.ɵɵtext(4, \"Morador: Vit\\u00E3o \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"hr\");\n      i0.ɵɵelementStart(6, \"p\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"p\");\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"display\", ctx.display);\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\"Validade da mangueira: \", ctx.clicado == null ? null : ctx.clicado.dataDeValidade, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Validade da v\\u00E1lvula: \", ctx.clicado == null ? null : ctx.clicado.dataDeValidade, \"\");\n    }\n  },\n  styles: [\".mapa01[_ngcontent-%COMP%] {\\n  width: 100vw;\\n  height: 100vh;\\n  display: flex;\\n}\\n\\n.mapaEntrada[_ngcontent-%COMP%] {\\n  height: 100vh;\\n  width: 100vw;\\n}\\n\\n.popup[_ngcontent-%COMP%] {\\n  border: solid 1px gray;\\n  background-color: white;\\n  max-width: 200px;\\n  padding: 10px;\\n  border-radius: 10px;\\n  box-shadow: black 2px 2px 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbGEtbWFwYS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7RUFDQSxhQUFBO0VBQ0EsYUFBQTtBQUNGOztBQUdBO0VBQ0UsYUFBQTtFQUNBLFlBQUE7QUFBRjs7QUFJQTtFQUNFLHNCQUFBO0VBQ0EsdUJBQUE7RUFFQSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDZCQUFBO0FBRkYiLCJmaWxlIjoidGVsYS1tYXBhLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hcGEwMXtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBkaXNwbGF5OiBmbGV4O1xuXG59XG5cbi5tYXBhRW50cmFkYXtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgd2lkdGg6IDEwMHZ3O1xufVxuXG5cbi5wb3B1cHsgXG4gIGJvcmRlcjogc29saWQgMXB4IGdyYXk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBcbiAgbWF4LXdpZHRoOiAyMDBweDtcbiAgcGFkZGluZzogMTBweDtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgYm94LXNoYWRvdzogYmxhY2sgMnB4IDJweCA1cHg7XG5cbn0iXX0= */\"]\n});","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/tela-mapa/tela-mapa.component.ts","/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/tela-mapa/tela-mapa.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport {XYZ, Cluster,  Vector as VectorSource} from 'ol/source';\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\nimport * as Proj from 'ol/proj.js';//Converter cordenadas para lat e long\nimport 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from 'ol/style';\nimport {boundingExtent} from 'ol/extent';\nimport { UsuarioService } from '../services/usuario.service';\nimport { Overlay } from 'ol';\n\n@Component({\n  selector: 'app-tela-mapa',\n  templateUrl: './tela-mapa.component.html',\n  styleUrls: ['./tela-mapa.component.scss']\n})\nexport class TelaMapaComponent implements OnInit {\n\n  constructor(    private usuarioService:UsuarioService) { }\n\n  ngOnInit(): void {\n  }\n\n  pontos: any;\n  display:  string = \"none\";\n  @ViewChild(\"popup\") popup!: ElementRef;\n  clicado: any;\n  overlay!: Overlay;\n\n  async ngAfterViewInit(){\n\n    this.pontos = await this.usuarioService.list();\n    this.overlay = new Overlay({\n      element: this.popup.nativeElement\n    })\n    const map = this.MapaCreate();\n    const cluster = this.cluster();\n    map.addLayer(cluster);\n    this.cliqueEventMapa(map, cluster);\n  }\n\n\n  private cliqueEventMapa(map: Map, cluster: any) {\n    map.on('click', (evento) => {\n      this.display = 'none'\n      cluster.getFeatures(evento.pixel).then((clickedFeatures: any) => {\n        if (clickedFeatures.length) {\n          const features = clickedFeatures[0].get('features');\n          if (features.length > 1) {\n            const extent = boundingExtent(\n              features.map((r: any) => r.getGeometry().getCoordinates())\n            );\n            map\n              .getView()\n              .fit(extent, { duration: 1000, padding: [50, 50, 50, 50] });\n          }else if(features.length == 1 && this.display == 'none'){\n            this.clicado = features[0].get('mangueiras')\n            this.display = 'block',\n            this.overlay.setPosition(evento.coordinate)\n          }\n        }\n      });\n    });\n  }\n\n\n  private MapaCreate(){\n\n    const latitude = -48.613666;\n    const longitude = -27.595115\n\n    const raster = new TileLayer({\n      source: new XYZ({\n        url: 'https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}',\n      }),\n    });\n\n    const map = new Map({\n      layers: [raster],\n      target: 'map',\n      overlays: [this.overlay],\n      view: new View({\n        center: Proj.fromLonLat([latitude, longitude]),\n        zoom: 14,\n      }),\n    });\n    return map;\n  }\n\n\n\n\n  private cluster(){\n    const features: any[] = [];\n    for (let i = 0; i < this.pontos.length; ++i) {\n      const ponto = Proj.fromLonLat([\n        this.pontos[i].longitude,\n        this.pontos[i].latitude,\n      ]);\n\n      const f = new Feature(new Point(ponto))\n      f.set('mangueira', this.pontos[i]),\n      features.push(f);\n\n      features[i] = new Feature(new Point(ponto));\n    }\n\n    const source = new VectorSource({\n      features: features,\n    });\n\n    const clusterSource = new Cluster({\n      distance: 80,\n      source: source,\n    });\n\n    const styleCache: any = {};\n\n    const clusters = new VectorLayer({\n      source: clusterSource,\n      style: function (feature) {\n        const size = feature.get('features').length;\n        let style = styleCache[size];\n        if (!style) {\n          style = new Style({\n            \n            image: new CircleStyle({\n              \n              radius: 14,\n              \n              stroke: new Stroke({\n                color: '#ff0000',\n              }),\n              fill: new Fill({\n                color: '#ff0000',\n              }),\n            }),\n            text: new Text({\n              text: size.toString(),\n              fill: new Fill({\n                color: '#fff',\n                \n              }),\n              scale: 1.3,\n            }),\n          });\n          styleCache[size] = style;\n        }\n        return style;\n      },\n    });\n\n    return clusters;\n  }\n\n\n\n}\n","<div class=\"mapaEntrada\">\n            <!-- zona do mapa -->\n            <div #popup class=\"popup\" [style.display]=\"display\">\n                  <p>Morador: Vitão\n\n                  </p>\n                  <hr>\n                  <p>Validade da mangueira: {{clicado?.dataDeValidade}}</p>\n                  <p >Validade da válvula: {{clicado?.dataDeValidade}}</p>\n            </div>\n            <div id=\"map\" class=\"mapa01\"></div>\n           \n</div>\n\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}