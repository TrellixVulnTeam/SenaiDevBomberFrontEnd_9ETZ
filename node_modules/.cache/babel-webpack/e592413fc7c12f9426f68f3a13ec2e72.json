{"ast":null,"code":"\"use strict\";\n/*\n * This source file contains the code for proxying calls in the master thread to calls in the workers\n * by `.postMessage()`-ing.\n *\n * Keep in mind that this code can make or break the program's performance! Need to optimize moreâ€¦\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProxyModule = exports.createProxyFunction = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst observable_fns_1 = require(\"observable-fns\");\n\nconst common_1 = require(\"../common\");\n\nconst observable_promise_1 = require(\"../observable-promise\");\n\nconst transferable_1 = require(\"../transferable\");\n\nconst messages_1 = require(\"../types/messages\");\n\nconst debugMessages = debug_1.default(\"threads:master:messages\");\nlet nextJobUID = 1;\n\nconst dedupe = array => Array.from(new Set(array));\n\nconst isJobErrorMessage = data => data && data.type === messages_1.WorkerMessageType.error;\n\nconst isJobResultMessage = data => data && data.type === messages_1.WorkerMessageType.result;\n\nconst isJobStartMessage = data => data && data.type === messages_1.WorkerMessageType.running;\n\nfunction createObservableForJob(worker, jobUID) {\n  return new observable_fns_1.Observable(observer => {\n    let asyncType;\n\n    const messageHandler = event => {\n      debugMessages(\"Message from worker:\", event.data);\n      if (!event.data || event.data.uid !== jobUID) return;\n\n      if (isJobStartMessage(event.data)) {\n        asyncType = event.data.resultType;\n      } else if (isJobResultMessage(event.data)) {\n        if (asyncType === \"promise\") {\n          if (typeof event.data.payload !== \"undefined\") {\n            observer.next(common_1.deserialize(event.data.payload));\n          }\n\n          observer.complete();\n          worker.removeEventListener(\"message\", messageHandler);\n        } else {\n          if (event.data.payload) {\n            observer.next(common_1.deserialize(event.data.payload));\n          }\n\n          if (event.data.complete) {\n            observer.complete();\n            worker.removeEventListener(\"message\", messageHandler);\n          }\n        }\n      } else if (isJobErrorMessage(event.data)) {\n        const error = common_1.deserialize(event.data.error);\n\n        if (asyncType === \"promise\" || !asyncType) {\n          observer.error(error);\n        } else {\n          observer.error(error);\n        }\n\n        worker.removeEventListener(\"message\", messageHandler);\n      }\n    };\n\n    worker.addEventListener(\"message\", messageHandler);\n    return () => {\n      if (asyncType === \"observable\" || !asyncType) {\n        const cancelMessage = {\n          type: messages_1.MasterMessageType.cancel,\n          uid: jobUID\n        };\n        worker.postMessage(cancelMessage);\n      }\n\n      worker.removeEventListener(\"message\", messageHandler);\n    };\n  });\n}\n\nfunction prepareArguments(rawArgs) {\n  if (rawArgs.length === 0) {\n    // Exit early if possible\n    return {\n      args: [],\n      transferables: []\n    };\n  }\n\n  const args = [];\n  const transferables = [];\n\n  for (const arg of rawArgs) {\n    if (transferable_1.isTransferDescriptor(arg)) {\n      args.push(common_1.serialize(arg.send));\n      transferables.push(...arg.transferables);\n    } else {\n      args.push(common_1.serialize(arg));\n    }\n  }\n\n  return {\n    args,\n    transferables: transferables.length === 0 ? transferables : dedupe(transferables)\n  };\n}\n\nfunction createProxyFunction(worker, method) {\n  return (...rawArgs) => {\n    const uid = nextJobUID++;\n    const {\n      args,\n      transferables\n    } = prepareArguments(rawArgs);\n    const runMessage = {\n      type: messages_1.MasterMessageType.run,\n      uid,\n      method,\n      args\n    };\n    debugMessages(\"Sending command to run function to worker:\", runMessage);\n\n    try {\n      worker.postMessage(runMessage, transferables);\n    } catch (error) {\n      return observable_promise_1.ObservablePromise.from(Promise.reject(error));\n    }\n\n    return observable_promise_1.ObservablePromise.from(observable_fns_1.multicast(createObservableForJob(worker, uid)));\n  };\n}\n\nexports.createProxyFunction = createProxyFunction;\n\nfunction createProxyModule(worker, methodNames) {\n  const proxy = {};\n\n  for (const methodName of methodNames) {\n    proxy[methodName] = createProxyFunction(worker, methodName);\n  }\n\n  return proxy;\n}\n\nexports.createProxyModule = createProxyModule;","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/threads/dist/master/invocation-proxy.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","createProxyModule","createProxyFunction","debug_1","require","observable_fns_1","common_1","observable_promise_1","transferable_1","messages_1","debugMessages","default","nextJobUID","dedupe","array","Array","from","Set","isJobErrorMessage","data","type","WorkerMessageType","error","isJobResultMessage","result","isJobStartMessage","running","createObservableForJob","worker","jobUID","Observable","observer","asyncType","messageHandler","event","uid","resultType","payload","next","deserialize","complete","removeEventListener","addEventListener","cancelMessage","MasterMessageType","cancel","postMessage","prepareArguments","rawArgs","length","args","transferables","arg","isTransferDescriptor","push","serialize","send","method","runMessage","run","ObservablePromise","Promise","reject","multicast","methodNames","proxy","methodName"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * This source file contains the code for proxying calls in the master thread to calls in the workers\n * by `.postMessage()`-ing.\n *\n * Keep in mind that this code can make or break the program's performance! Need to optimize moreâ€¦\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProxyModule = exports.createProxyFunction = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst observable_fns_1 = require(\"observable-fns\");\nconst common_1 = require(\"../common\");\nconst observable_promise_1 = require(\"../observable-promise\");\nconst transferable_1 = require(\"../transferable\");\nconst messages_1 = require(\"../types/messages\");\nconst debugMessages = debug_1.default(\"threads:master:messages\");\nlet nextJobUID = 1;\nconst dedupe = (array) => Array.from(new Set(array));\nconst isJobErrorMessage = (data) => data && data.type === messages_1.WorkerMessageType.error;\nconst isJobResultMessage = (data) => data && data.type === messages_1.WorkerMessageType.result;\nconst isJobStartMessage = (data) => data && data.type === messages_1.WorkerMessageType.running;\nfunction createObservableForJob(worker, jobUID) {\n    return new observable_fns_1.Observable(observer => {\n        let asyncType;\n        const messageHandler = ((event) => {\n            debugMessages(\"Message from worker:\", event.data);\n            if (!event.data || event.data.uid !== jobUID)\n                return;\n            if (isJobStartMessage(event.data)) {\n                asyncType = event.data.resultType;\n            }\n            else if (isJobResultMessage(event.data)) {\n                if (asyncType === \"promise\") {\n                    if (typeof event.data.payload !== \"undefined\") {\n                        observer.next(common_1.deserialize(event.data.payload));\n                    }\n                    observer.complete();\n                    worker.removeEventListener(\"message\", messageHandler);\n                }\n                else {\n                    if (event.data.payload) {\n                        observer.next(common_1.deserialize(event.data.payload));\n                    }\n                    if (event.data.complete) {\n                        observer.complete();\n                        worker.removeEventListener(\"message\", messageHandler);\n                    }\n                }\n            }\n            else if (isJobErrorMessage(event.data)) {\n                const error = common_1.deserialize(event.data.error);\n                if (asyncType === \"promise\" || !asyncType) {\n                    observer.error(error);\n                }\n                else {\n                    observer.error(error);\n                }\n                worker.removeEventListener(\"message\", messageHandler);\n            }\n        });\n        worker.addEventListener(\"message\", messageHandler);\n        return () => {\n            if (asyncType === \"observable\" || !asyncType) {\n                const cancelMessage = {\n                    type: messages_1.MasterMessageType.cancel,\n                    uid: jobUID\n                };\n                worker.postMessage(cancelMessage);\n            }\n            worker.removeEventListener(\"message\", messageHandler);\n        };\n    });\n}\nfunction prepareArguments(rawArgs) {\n    if (rawArgs.length === 0) {\n        // Exit early if possible\n        return {\n            args: [],\n            transferables: []\n        };\n    }\n    const args = [];\n    const transferables = [];\n    for (const arg of rawArgs) {\n        if (transferable_1.isTransferDescriptor(arg)) {\n            args.push(common_1.serialize(arg.send));\n            transferables.push(...arg.transferables);\n        }\n        else {\n            args.push(common_1.serialize(arg));\n        }\n    }\n    return {\n        args,\n        transferables: transferables.length === 0 ? transferables : dedupe(transferables)\n    };\n}\nfunction createProxyFunction(worker, method) {\n    return ((...rawArgs) => {\n        const uid = nextJobUID++;\n        const { args, transferables } = prepareArguments(rawArgs);\n        const runMessage = {\n            type: messages_1.MasterMessageType.run,\n            uid,\n            method,\n            args\n        };\n        debugMessages(\"Sending command to run function to worker:\", runMessage);\n        try {\n            worker.postMessage(runMessage, transferables);\n        }\n        catch (error) {\n            return observable_promise_1.ObservablePromise.from(Promise.reject(error));\n        }\n        return observable_promise_1.ObservablePromise.from(observable_fns_1.multicast(createObservableForJob(worker, uid)));\n    });\n}\nexports.createProxyFunction = createProxyFunction;\nfunction createProxyModule(worker, methodNames) {\n    const proxy = {};\n    for (const methodName of methodNames) {\n        proxy[methodName] = createProxyFunction(worker, methodName);\n    }\n    return proxy;\n}\nexports.createProxyModule = createProxyModule;\n"]},"metadata":{},"sourceType":"script"}