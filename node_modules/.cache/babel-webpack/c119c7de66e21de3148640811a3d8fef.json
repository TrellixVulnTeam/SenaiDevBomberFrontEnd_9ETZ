{"ast":null,"code":"import _asyncToGenerator from \"/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiUrl}/authenticate`;\n  }\n\n  createToken(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const authentication = yield _this.http.post(_this.url, request).toPromise();\n\n      _this.storeToken(authentication);\n\n      _this.saveUser(authentication.user);\n\n      return authentication;\n    })();\n  }\n\n  isAdmin(user) {\n    return user.perfilAcesso == 'ADMIN';\n  }\n\n  isMonitor(user) {\n    return user.perfilAcesso == 'MONITOR';\n  }\n\n  isLogged() {\n    if (this.getStoredToken()) return true;else return false;\n  }\n\n  saveUser(user) {\n    localStorage.setItem('pet-user', JSON.stringify(user));\n  }\n\n  getUser() {\n    try {\n      const str = localStorage.getItem('pet-user');\n      if (!str) return {};\n      return JSON.parse(str);\n    } catch (err) {\n      return {};\n    }\n  }\n\n  storeToken(response) {\n    localStorage.setItem('pet-token', JSON.stringify(response));\n  }\n\n  getStoredToken() {\n    try {\n      const str = localStorage.getItem('pet-token');\n      if (!str) return undefined;\n      return JSON.parse(str);\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('pet-token');\n    localStorage.removeItem('pet-user');\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/auth/auth.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,8BAA5B;;;AAQA,OAAM,MAAO,WAAP,CAAkB;AACtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAEpB,SAAA,GAAA,GAAM,GAAG,WAAW,CAAC,MAAM,eAA3B;AAFwC;;AAIlC,EAAA,WAAW,CAAC,OAAD,EAAoB;AAAA;;AAAA;AACnC,YAAM,cAAc,SAAS,KAAI,CAAC,IAAL,CAC1B,IAD0B,CACd,KAAI,CAAC,GADS,EACJ,OADI,EAE1B,SAF0B,EAA7B;;AAGA,MAAA,KAAI,CAAC,UAAL,CAAgB,cAAhB;;AACA,MAAA,KAAI,CAAC,QAAL,CAAc,cAAc,CAAC,IAA7B;;AAEA,aAAO,cAAP;AAPmC;AAQpC;;AAED,EAAA,OAAO,CAAC,IAAD,EAAW;AAChB,WAAO,IAAI,CAAC,YAAL,IAAqB,OAA5B;AACD;;AAED,EAAA,SAAS,CAAC,IAAD,EAAW;AAClB,WAAO,IAAI,CAAC,YAAL,IAAqB,SAA5B;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,QAAI,KAAK,cAAL,EAAJ,EAA2B,OAAO,IAAP,CAA3B,KACK,OAAO,KAAP;AACN;;AAED,EAAA,QAAQ,CAAC,IAAD,EAAW;AACjB,IAAA,YAAY,CAAC,OAAb,CAAqB,UAArB,EAAiC,IAAI,CAAC,SAAL,CAAe,IAAf,CAAjC;AACD;;AAED,EAAA,OAAO,GAAA;AACL,QAAI;AACF,YAAM,GAAG,GAAG,YAAY,CAAC,OAAb,CAAqB,UAArB,CAAZ;AACA,UAAI,CAAC,GAAL,EAAU,OAAO,EAAP;AACV,aAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD,KAJD,CAIE,OAAO,GAAP,EAAY;AACZ,aAAO,EAAP;AACD;AACF;;AAED,EAAA,UAAU,CAAC,QAAD,EAAgB;AACxB,IAAA,YAAY,CAAC,OAAb,CAAqB,WAArB,EAAkC,IAAI,CAAC,SAAL,CAAe,QAAf,CAAlC;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,QAAI;AACF,YAAM,GAAG,GAAG,YAAY,CAAC,OAAb,CAAqB,WAArB,CAAZ;AACA,UAAI,CAAC,GAAL,EAAU,OAAO,SAAP;AACV,aAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD,KAJD,CAIE,OAAO,GAAP,EAAY;AACZ,aAAO,SAAP;AACD;AACF;;AAED,EAAA,MAAM,GAAA;AACJ,IAAA,YAAY,CAAC,UAAb,CAAwB,WAAxB;AACA,IAAA,YAAY,CAAC,UAAb,CAAwB,UAAxB;AACD;;AA3DqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { JwtRequest } from '../models/JwtRequest';\nimport { Token } from './../models/Token';\nimport { User } from './../models/User';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private http: HttpClient) {}\n\n  url = `${environment.apiUrl}/authenticate`;\n\n  async createToken(request: JwtRequest) {\n    const authentication = await this.http\n      .post<Token>(this.url, request)\n      .toPromise();\n    this.storeToken(authentication);\n    this.saveUser(authentication.user);\n\n    return authentication;\n  }\n\n  isAdmin(user: User) {\n    return user.perfilAcesso == 'ADMIN';\n  }\n\n  isMonitor(user: User) {\n    return user.perfilAcesso == 'MONITOR';\n  }\n\n  isLogged() {\n    if (this.getStoredToken()) return true;\n    else return false;\n  }\n\n  saveUser(user: User) {\n    localStorage.setItem('pet-user', JSON.stringify(user));\n  }\n\n  getUser(): User {\n    try {\n      const str = localStorage.getItem('pet-user');\n      if (!str) return {} as User;\n      return JSON.parse(str) as User;\n    } catch (err) {\n      return {} as User;\n    }\n  }\n\n  storeToken(response: Token) {\n    localStorage.setItem('pet-token', JSON.stringify(response));\n  }\n\n  getStoredToken() {\n    try {\n      const str = localStorage.getItem('pet-token');\n      if (!str) return undefined;\n      return JSON.parse(str) as Token;\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('pet-token');\n    localStorage.removeItem('pet-user');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}