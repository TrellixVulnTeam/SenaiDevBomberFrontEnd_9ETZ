{"ast":null,"code":"import _asyncToGenerator from \"/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { XYZ, Cluster, Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport * as Proj from 'ol/proj.js'; //Converter cordenadas para lat e long\n\nimport 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport { Circle as CircleStyle, Fill, Stroke, Style, Text } from 'ol/style';\nimport { boundingExtent } from 'ol/extent';\nlet TelaMapaComponent = class TelaMapaComponent {\n  constructor(usuarioService) {\n    this.usuarioService = usuarioService;\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.pontos = yield _this.usuarioService.list();\n\n      const map = _this.MapaCreate();\n\n      const cluster = _this.cluster();\n\n      map.addLayer(cluster);\n\n      _this.cliqueEventMapa(map, cluster);\n    })();\n  }\n\n  cliqueEventMapa(map, cluster) {\n    map.on('click', evento => {\n      cluster.getFeatures(evento.pixel).then(clickedFeatures => {\n        if (clickedFeatures.length) {\n          const features = clickedFeatures[0].get('features');\n\n          if (features.length > 1) {\n            const extent = boundingExtent(features.map(r => r.getGeometry().getCoordinates()));\n            map.getView().fit(extent, {\n              duration: 1000,\n              padding: [50, 50, 50, 50]\n            });\n          }\n        }\n      });\n    });\n  }\n\n  MapaCreate() {\n    const latitude = -48.613666;\n    const longitude = -27.595115;\n    const raster = new TileLayer({\n      source: new XYZ({\n        url: 'https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}'\n      })\n    });\n    const map = new Map({\n      layers: [raster],\n      target: 'map',\n      view: new View({\n        center: Proj.fromLonLat([latitude, longitude]),\n        zoom: 14\n      })\n    });\n    return map;\n  }\n\n  cluster() {\n    const features = [];\n\n    for (let i = 0; i < this.pontos.length; ++i) {\n      const ponto = Proj.fromLonLat([this.pontos[i].longitude, this.pontos[i].latitude]);\n      features[i] = new Feature(new Point(ponto));\n    }\n\n    const source = new VectorSource({\n      features: features\n    });\n    const clusterSource = new Cluster({\n      distance: 80,\n      source: source\n    });\n    const styleCache = {};\n    const clusters = new VectorLayer({\n      source: clusterSource,\n      style: function (feature) {\n        const size = feature.get('features').length;\n        let style = styleCache[size];\n\n        if (!style) {\n          style = new Style({\n            image: new CircleStyle({\n              radius: 14,\n              stroke: new Stroke({\n                color: '#ff0000'\n              }),\n              fill: new Fill({\n                color: '#ff0000'\n              })\n            }),\n            text: new Text({\n              text: size.toString(),\n              fill: new Fill({\n                color: '#fff'\n              }),\n              scale: 1.3\n            })\n          });\n          styleCache[size] = style;\n        }\n\n        return style;\n      }\n    });\n    return clusters;\n  }\n\n};\nTelaMapaComponent = __decorate([Component({\n  selector: 'app-tela-mapa',\n  templateUrl: './tela-mapa.component.html',\n  styleUrls: ['./tela-mapa.component.scss']\n})], TelaMapaComponent);\nexport { TelaMapaComponent };","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/tela-mapa/tela-mapa.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport {XYZ, Cluster,  Vector as VectorSource} from 'ol/source';\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\nimport * as Proj from 'ol/proj.js';//Converter cordenadas para lat e long\nimport 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from 'ol/style';\nimport {boundingExtent} from 'ol/extent';\nimport { UsuarioService } from '../services/usuario.service';\n\n@Component({\n  selector: 'app-tela-mapa',\n  templateUrl: './tela-mapa.component.html',\n  styleUrls: ['./tela-mapa.component.scss']\n})\nexport class TelaMapaComponent implements OnInit {\n\n  constructor(    private usuarioService:UsuarioService) { }\n\n  ngOnInit(): void {\n  }\n\n  pontos: any;\n\n\n  async ngAfterViewInit(){\n\n    this.pontos = await this.usuarioService.list();\n    const map = this.MapaCreate();\n    const cluster = this.cluster();\n    map.addLayer(cluster);\n    this.cliqueEventMapa(map, cluster);\n  }\n\n\n  private cliqueEventMapa(map: Map, cluster: any) {\n    map.on('click', (evento) => {\n      cluster.getFeatures(evento.pixel).then((clickedFeatures: any) => {\n        if (clickedFeatures.length) {\n          const features = clickedFeatures[0].get('features');\n          if (features.length > 1) {\n            const extent = boundingExtent(\n              features.map((r: any) => r.getGeometry().getCoordinates())\n            );\n            map\n              .getView()\n              .fit(extent, { duration: 1000, padding: [50, 50, 50, 50] });\n          }\n        }\n      });\n    });\n  }\n\n\n  private MapaCreate(){\n\n    const latitude = -48.613666;\n    const longitude = -27.595115\n\n    const raster = new TileLayer({\n      source: new XYZ({\n        url: 'https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}',\n      }),\n    });\n\n    const map = new Map({\n      layers: [raster],\n      target: 'map',\n      view: new View({\n        center: Proj.fromLonLat([latitude, longitude]),\n        zoom: 14,\n      }),\n    });\n    return map;\n  }\n\n\n\n\n  private cluster(){\n    const features: any[] = [];\n    for (let i = 0; i < this.pontos.length; ++i) {\n      const ponto = Proj.fromLonLat([\n        this.pontos[i].longitude,\n        this.pontos[i].latitude,\n      ]);\n      features[i] = new Feature(new Point(ponto));\n    }\n\n    const source = new VectorSource({\n      features: features,\n    });\n\n    const clusterSource = new Cluster({\n      distance: 80,\n      source: source,\n    });\n\n    const styleCache: any = {};\n\n    const clusters = new VectorLayer({\n      source: clusterSource,\n      style: function (feature) {\n        const size = feature.get('features').length;\n        let style = styleCache[size];\n        if (!style) {\n          style = new Style({\n            image: new CircleStyle({\n              radius: 14,\n              stroke: new Stroke({\n                color: '#ff0000',\n              }),\n              fill: new Fill({\n                color: '#ff0000',\n              }),\n            }),\n            text: new Text({\n              text: size.toString(),\n              fill: new Fill({\n                color: '#fff',\n              }),\n              scale: 1.3,\n            }),\n          });\n          styleCache[size] = style;\n        }\n        return style;\n      },\n    });\n\n    return clusters;\n  }\n\n\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}