{"ast":null,"code":"import _asyncToGenerator from \"/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiUrl}/authenticate`;\n  }\n\n  createToken(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const authentication = yield _this.http.post(_this.url, request).toPromise();\n\n      _this.storeToken(authentication);\n\n      _this.saveUser(authentication.bombeiro);\n\n      return authentication;\n    })();\n  } // isAdmin(user: User) {\n  //   return user.perfilAcesso == 'ADMIN';\n  // }\n  // isMonitor(user: User) {\n  //   return user.perfilAcesso == 'MONITOR';\n  // }\n  // isLogged() {\n  //   if (this.getStoredToken()) return true;\n  //   else return false;\n  // }\n\n\n  saveUser(bombeiro) {\n    localStorage.setItem('bombeiro', JSON.stringify(bombeiro));\n  } // getUser(): User {\n  //   try {\n  //     const str = localStorage.getItem('pet-user');\n  //     if (!str) return {} as User;\n  //     return JSON.parse(str) as User;\n  //   } catch (err) {\n  //     return {} as User;\n  //   }\n  // }\n\n\n  storeToken(Response) {\n    localStorage.setItem('', JSON.stringify(Response));\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/auth/auth.service.ts"],"names":[],"mappings":";AAGA,SAAS,WAAT,QAA4B,8BAA5B;;;AAQA,OAAM,MAAO,WAAP,CAAkB;AACtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAEpB,SAAA,GAAA,GAAM,GAAG,WAAW,CAAC,MAAM,eAA3B;AAFwC;;AAMjC,EAAA,WAAW,CAAC,OAAD,EAAoB;AAAA;;AAAA;AACnC,YAAM,cAAc,SAAS,KAAI,CAAC,IAAL,CAC1B,IAD0B,CACd,KAAI,CAAC,GADS,EACJ,OADI,EAE1B,SAF0B,EAA7B;;AAGA,MAAA,KAAI,CAAC,UAAL,CAAgB,cAAhB;;AACA,MAAA,KAAI,CAAC,QAAL,CAAc,cAAc,CAAC,QAA7B;;AAEA,aAAO,cAAP;AAPmC;AAQpC,GAfoB,CAiBtB;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEC,EAAA,QAAQ,CAAC,QAAD,EAAmB;AAC1B,IAAA,YAAY,CAAC,OAAb,CAAqB,UAArB,EAAiC,IAAI,CAAC,SAAL,CAAe,QAAf,CAAjC;AACA,GAhCoB,CAkCtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEC,EAAA,UAAU,CAAC,QAAD,EAAgB;AACzB,IAAA,YAAY,CAAC,OAAb,CAAqB,EAArB,EAAyB,IAAI,CAAC,SAAL,CAAe,QAAf,CAAzB;AAEA;;AA/CoB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Token } from '@angular/compiler/src/ml_parser/lexer';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { bombeiro } from '../models/bombeiro';\nimport { JwtRequest } from '../models/JwtRequest';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private http: HttpClient) {}\n\n  url = `${environment.apiUrl}/authenticate`;\n  \n    \n\n   async createToken(request: JwtRequest) {\n     const authentication = await this.http\n       .post<Token>(this.url, request)\n       .toPromise();\n     this.storeToken(authentication);\n     this.saveUser(authentication.bombeiro);\n\n     return authentication;\n   }\n\n  // isAdmin(user: User) {\n  //   return user.perfilAcesso == 'ADMIN';\n  // }\n\n  // isMonitor(user: User) {\n  //   return user.perfilAcesso == 'MONITOR';\n  // }\n\n  // isLogged() {\n  //   if (this.getStoredToken()) return true;\n  //   else return false;\n  // }\n\n   saveUser(bombeiro: bombeiro) {\n    localStorage.setItem('bombeiro', JSON.stringify(bombeiro));\n   }\n\n  // getUser(): User {\n  //   try {\n  //     const str = localStorage.getItem('pet-user');\n  //     if (!str) return {} as User;\n  //     return JSON.parse(str) as User;\n  //   } catch (err) {\n  //     return {} as User;\n  //   }\n  // }\n\n   storeToken(Response: Token) {\n    localStorage.setItem('', JSON.stringify(Response));\n  \n   }\n     \n\n  // getStoredToken() {\n  //   try {\n  //     const str = localStorage.getItem('pet-token');\n  //     if (!str) return undefined;\n  //     return JSON.parse(str) as Token;\n  //   } catch (err) {\n  //     return undefined;\n  //   }\n  // }\n\n  // logout() {\n  //   localStorage.removeItem('pet-token');\n  //   localStorage.removeItem('pet-user');\n  // }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}