{"ast":null,"code":"import _asyncToGenerator from \"/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { XYZ, Cluster, Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport * as Proj from 'ol/proj.js'; //Converter cordenadas para lat e long\n\nimport 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport { Circle as CircleStyle, Fill, Stroke, Style, Text } from 'ol/style';\nimport { boundingExtent } from 'ol/extent';\nimport { Overlay } from 'ol';\nlet TelaMapaComponent = class TelaMapaComponent {\n  constructor(usuarioService, mangueiraSer, valvulasSer) {\n    this.usuarioService = usuarioService;\n    this.mangueiraSer = mangueiraSer;\n    this.valvulasSer = valvulasSer;\n    this.display = \"none\";\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.pontos = yield _this.usuarioService.list();\n      _this.mangueiras = yield _this.mangueiraSer.list();\n      _this.valvulas = yield _this.valvulasSer.list();\n      _this.overlay = new Overlay({\n        element: _this.popup.nativeElement\n      });\n\n      const map = _this.MapaCreate();\n\n      _this.pontos.forEach(u => {\n        u['valvulas'] = _this.valvulas.filter(v => v.usuario.id == u.id).map(v => v.dataDeValidade), u['mangueiras'] = _this.valvulas.filter(m => m.usuario.id == u.id).map(m => m.dataDeValidade);\n        let data = [...u['valvulas'], ...u['mangueiras']].sort()[0];\n        u['dataValidade'] = new Date(data);\n      });\n\n      const umAno = new Date().setFullYear(2020);\n      const doisAnos = new Date().setUTCFullYear(2019);\n      const conjuntos = [_this.pontos.filter(u => u.dataValidade < umAno), _this.pontos.filter(u => u.dataValidade < umAno && u.dataValidade < doisAnos), _this.pontos.filter(u => u.dataValidade > doisAnos)];\n      const colors = [\"red\", \"yellow\", \"green\"];\n\n      for (let i = 0; i < conjuntos.length; i++) {\n        const cluster = _this.cluster(conjuntos[i], colors[i]);\n\n        map.addLayer(cluster);\n\n        _this.cliqueEventMapa(map, cluster);\n      }\n    })();\n  }\n\n  cliqueEventMapa(map, cluster) {\n    map.on('click', evento => {\n      this.display = 'none';\n      cluster.getFeatures(evento.pixel).then(clickedFeatures => {\n        if (clickedFeatures.length) {\n          const features = clickedFeatures[0].get('features');\n\n          if (features.length > 1) {\n            const extent = boundingExtent(features.map(r => r.getGeometry().getCoordinates()));\n            map.getView().fit(extent, {\n              duration: 1000,\n              padding: [50, 50, 50, 50]\n            });\n          } else if (features.length == 1 && this.display == 'none') {\n            this.clicado = features[0].get('pontos');\n            this.display = 'block', this.overlay.setPosition(evento.coordinate);\n          }\n        }\n      });\n    });\n  }\n\n  MapaCreate() {\n    const latitude = -48.613666;\n    const longitude = -27.595115;\n    const raster = new TileLayer({\n      source: new XYZ({\n        url: 'https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}'\n      })\n    });\n    const map = new Map({\n      layers: [raster],\n      target: 'map',\n      overlays: [this.overlay],\n      view: new View({\n        center: Proj.fromLonLat([latitude, longitude]),\n        zoom: 14\n      })\n    });\n    return map;\n  }\n\n  cluster(pontos, color) {\n    const features = [];\n\n    for (let i = 0; i < this.pontos.length; ++i) {\n      const ponto = Proj.fromLonLat([this.pontos[i].longitude, this.pontos[i].latitude]);\n      const f = new Feature(new Point(ponto));\n      f.set('pontos', pontos[i]), features.push(f);\n    }\n\n    const source = new VectorSource({\n      features: features\n    });\n    const clusterSource = new Cluster({\n      distance: 80,\n      source: source\n    });\n    const styleCache = {};\n    const clusters = new VectorLayer({\n      source: clusterSource,\n      style: function (feature) {\n        const size = feature.get('features').length;\n        let style = styleCache[size];\n\n        if (!style) {\n          style = new Style({\n            image: new CircleStyle({\n              radius: 14,\n              stroke: new Stroke({\n                color\n              }),\n              fill: new Fill({\n                color\n              })\n            }),\n            text: new Text({\n              text: size.toString(),\n              fill: new Fill({\n                color: '#fff'\n              }),\n              scale: 1.3\n            })\n          });\n          styleCache[size] = style;\n        }\n\n        return style;\n      }\n    });\n    return clusters;\n  }\n\n};\n\n__decorate([ViewChild(\"popup\")], TelaMapaComponent.prototype, \"popup\", void 0);\n\nTelaMapaComponent = __decorate([Component({\n  selector: 'app-tela-mapa',\n  templateUrl: './tela-mapa.component.html',\n  styleUrls: ['./tela-mapa.component.scss']\n})], TelaMapaComponent);\nexport { TelaMapaComponent };","map":{"version":3,"sources":["/home/xittz/Documentos/sa-bombeiros3/sa-bombeiros/src/app/tela-mapa/tela-mapa.component.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,EAAwC,SAAxC,QAAwD,eAAxD;AACA,OAAO,WAAP;AACA,OAAO,GAAP,MAAgB,QAAhB;AACA,OAAO,IAAP,MAAiB,SAAjB;AACA,SAAQ,GAAR,EAAa,OAAb,EAAuB,MAAM,IAAI,YAAjC,QAAoD,WAApD;AACA,SAAQ,IAAI,IAAI,SAAhB,EAA2B,MAAM,IAAI,WAArC,QAAuD,UAAvD;AACA,OAAO,KAAK,IAAZ,MAAsB,YAAtB,C,CAAmC;;AACnC,OAAO,WAAP;AACA,OAAO,OAAP,MAAoB,YAApB;AACA,OAAO,KAAP,MAAkB,eAAlB;AACA,SACE,MAAM,IAAI,WADZ,EAEE,IAFF,EAGE,MAHF,EAIE,KAJF,EAKE,IALF,QAMO,UANP;AAOA,SAAQ,cAAR,QAA6B,WAA7B;AAEA,SAAS,OAAT,QAAwB,IAAxB;AAYA,IAAa,iBAAiB,GAA9B,MAAa,iBAAb,CAA8B;AAE5B,EAAA,WAAA,CAAwB,cAAxB,EAA+D,YAA/D,EAAuG,WAAvG,EAAkI;AAA1G,SAAA,cAAA,GAAA,cAAA;AAAuC,SAAA,YAAA,GAAA,YAAA;AAAwC,SAAA,WAAA,GAAA,WAAA;AAOvG,SAAA,OAAA,GAAmB,MAAnB;AAPuI;;AAEvI,EAAA,QAAQ,GAAA,CACP;;AAWK,EAAA,eAAe,GAAA;AAAA;;AAAA;AAEnB,MAAA,KAAI,CAAC,MAAL,SAAoB,KAAI,CAAC,cAAL,CAAoB,IAApB,EAApB;AACA,MAAA,KAAI,CAAC,UAAL,SAAwB,KAAI,CAAC,YAAL,CAAkB,IAAlB,EAAxB;AACA,MAAA,KAAI,CAAC,QAAL,SAAsB,KAAI,CAAC,WAAL,CAAiB,IAAjB,EAAtB;AAIA,MAAA,KAAI,CAAC,OAAL,GAAe,IAAI,OAAJ,CAAY;AACzB,QAAA,OAAO,EAAE,KAAI,CAAC,KAAL,CAAW;AADK,OAAZ,CAAf;;AAIA,YAAM,GAAG,GAAG,KAAI,CAAC,UAAL,EAAZ;;AAGA,MAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAqB,CAAD,IAAW;AAE7B,QAAA,CAAC,CAAC,UAAD,CAAD,GAAgB,KAAI,CAAC,QAAL,CAAc,MAAd,CAAsB,CAAD,IAAY,CAAC,CAAC,OAAF,CAAU,EAAV,IAAgB,CAAC,CAAC,EAAnD,EAAuD,GAAvD,CAA4D,CAAD,IAAY,CAAC,CAAC,cAAzE,CAAhB,EACA,CAAC,CAAC,YAAD,CAAD,GAAkB,KAAI,CAAC,QAAL,CAAc,MAAd,CAAsB,CAAD,IAAY,CAAC,CAAC,OAAF,CAAU,EAAV,IAAgB,CAAC,CAAC,EAAnD,EAAuD,GAAvD,CAA4D,CAAD,IAAY,CAAC,CAAC,cAAzE,CADlB;AAEA,YAAI,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,UAAD,CAAL,EAAmB,GAAG,CAAC,CAAC,YAAD,CAAvB,EAAuC,IAAvC,GAA8C,CAA9C,CAAX;AACA,QAAA,CAAC,CAAC,cAAD,CAAD,GAAoB,IAAI,IAAJ,CAAS,IAAT,CAApB;AACD,OAND;;AAQA,YAAM,KAAK,GAAG,IAAI,IAAJ,GAAW,WAAX,CAAuB,IAAvB,CAAd;AACA,YAAM,QAAQ,GAAG,IAAI,IAAJ,GAAW,cAAX,CAA0B,IAA1B,CAAjB;AAEA,YAAM,SAAS,GAAG,CAChB,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAoB,CAAD,IAAY,CAAC,CAAC,YAAF,GAAiB,KAAhD,CADgB,EAEhB,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAoB,CAAD,IAAY,CAAC,CAAC,YAAF,GAAiB,KAAjB,IAA0B,CAAC,CAAC,YAAF,GAAiB,QAA1E,CAFgB,EAGhB,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAoB,CAAD,IAAY,CAAC,CAAC,YAAF,GAAiB,QAAhD,CAHgB,CAAlB;AAQA,YAAM,MAAM,GAAG,CAAC,KAAD,EAAQ,QAAR,EAAkB,OAAlB,CAAf;;AAGA,WAAI,IAAI,CAAC,GAAG,CAAZ,EAAe,CAAC,GAAG,SAAS,CAAC,MAA7B,EAAoC,CAAC,EAArC,EAAwC;AAEpC,cAAM,OAAO,GAAG,KAAI,CAAC,OAAL,CAAa,SAAS,CAAC,CAAD,CAAtB,EAA2B,MAAM,CAAC,CAAD,CAAjC,CAAhB;;AACA,QAAA,GAAG,CAAC,QAAJ,CAAa,OAAb;;AACA,QAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,EAA0B,OAA1B;AAEL;AA3CoB;AA4CpB;;AAGO,EAAA,eAAe,CAAC,GAAD,EAAW,OAAX,EAAuB;AAC5C,IAAA,GAAG,CAAC,EAAJ,CAAO,OAAP,EAAiB,MAAD,IAAW;AACzB,WAAK,OAAL,GAAe,MAAf;AACA,MAAA,OAAO,CAAC,WAAR,CAAoB,MAAM,CAAC,KAA3B,EAAkC,IAAlC,CAAwC,eAAD,IAAyB;AAC9D,YAAI,eAAe,CAAC,MAApB,EAA4B;AAC1B,gBAAM,QAAQ,GAAG,eAAe,CAAC,CAAD,CAAf,CAAmB,GAAnB,CAAuB,UAAvB,CAAjB;;AACA,cAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,kBAAM,MAAM,GAAG,cAAc,CAC3B,QAAQ,CAAC,GAAT,CAAc,CAAD,IAAY,CAAC,CAAC,WAAF,GAAgB,cAAhB,EAAzB,CAD2B,CAA7B;AAGA,YAAA,GAAG,CACA,OADH,GAEG,GAFH,CAEO,MAFP,EAEe;AAAE,cAAA,QAAQ,EAAE,IAAZ;AAAkB,cAAA,OAAO,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb;AAA3B,aAFf;AAGD,WAPD,MAOM,IAAG,QAAQ,CAAC,MAAT,IAAmB,CAAnB,IAAwB,KAAK,OAAL,IAAgB,MAA3C,EAAkD;AACtD,iBAAK,OAAL,GAAe,QAAQ,CAAC,CAAD,CAAR,CAAY,GAAZ,CAAgB,QAAhB,CAAf;AACA,iBAAK,OAAL,GAAe,OAAf,EACA,KAAK,OAAL,CAAa,WAAb,CAAyB,MAAM,CAAC,UAAhC,CADA;AAED;AACF;AACF,OAhBD;AAiBD,KAnBD;AAoBD;;AAGO,EAAA,UAAU,GAAA;AAEhB,UAAM,QAAQ,GAAG,CAAC,SAAlB;AACA,UAAM,SAAS,GAAG,CAAC,SAAnB;AAEA,UAAM,MAAM,GAAG,IAAI,SAAJ,CAAc;AAC3B,MAAA,MAAM,EAAE,IAAI,GAAJ,CAAQ;AACd,QAAA,GAAG,EAAE;AADS,OAAR;AADmB,KAAd,CAAf;AAMA,UAAM,GAAG,GAAG,IAAI,GAAJ,CAAQ;AAClB,MAAA,MAAM,EAAE,CAAC,MAAD,CADU;AAElB,MAAA,MAAM,EAAE,KAFU;AAGlB,MAAA,QAAQ,EAAE,CAAC,KAAK,OAAN,CAHQ;AAIlB,MAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,QAAA,MAAM,EAAE,IAAI,CAAC,UAAL,CAAgB,CAAC,QAAD,EAAW,SAAX,CAAhB,CADK;AAEb,QAAA,IAAI,EAAE;AAFO,OAAT;AAJY,KAAR,CAAZ;AASA,WAAO,GAAP;AACD;;AAKO,EAAA,OAAO,CAAC,MAAD,EAAoB,KAApB,EAAiC;AAC9C,UAAM,QAAQ,GAAU,EAAxB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,MAAL,CAAY,MAAhC,EAAwC,EAAE,CAA1C,EAA6C;AAC3C,YAAM,KAAK,GAAG,IAAI,CAAC,UAAL,CAAgB,CAC5B,KAAK,MAAL,CAAY,CAAZ,EAAe,SADa,EAE5B,KAAK,MAAL,CAAY,CAAZ,EAAe,QAFa,CAAhB,CAAd;AAKA,YAAM,CAAC,GAAG,IAAI,OAAJ,CAAY,IAAI,KAAJ,CAAU,KAAV,CAAZ,CAAV;AACA,MAAA,CAAC,CAAC,GAAF,CAAM,QAAN,EAAgB,MAAM,CAAC,CAAD,CAAtB,GACA,QAAQ,CAAC,IAAT,CAAc,CAAd,CADA;AAGD;;AAED,UAAM,MAAM,GAAG,IAAI,YAAJ,CAAiB;AAC9B,MAAA,QAAQ,EAAE;AADoB,KAAjB,CAAf;AAIA,UAAM,aAAa,GAAG,IAAI,OAAJ,CAAY;AAChC,MAAA,QAAQ,EAAE,EADsB;AAEhC,MAAA,MAAM,EAAE;AAFwB,KAAZ,CAAtB;AAKA,UAAM,UAAU,GAAQ,EAAxB;AAEA,UAAM,QAAQ,GAAG,IAAI,WAAJ,CAAgB;AAC/B,MAAA,MAAM,EAAE,aADuB;AAE/B,MAAA,KAAK,EAAE,UAAU,OAAV,EAAiB;AACtB,cAAM,IAAI,GAAG,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,MAArC;AACA,YAAI,KAAK,GAAG,UAAU,CAAC,IAAD,CAAtB;;AACA,YAAI,CAAC,KAAL,EAAY;AACV,UAAA,KAAK,GAAG,IAAI,KAAJ,CAAU;AAEhB,YAAA,KAAK,EAAE,IAAI,WAAJ,CAAgB;AAErB,cAAA,MAAM,EAAE,EAFa;AAIrB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA;AADiB,eAAX,CAJa;AAOrB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA;AADa,eAAT;AAPe,aAAhB,CAFS;AAahB,YAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,cAAA,IAAI,EAAE,IAAI,CAAC,QAAL,EADO;AAEb,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFO;AAMb,cAAA,KAAK,EAAE;AANM,aAAT;AAbU,WAAV,CAAR;AAsBA,UAAA,UAAU,CAAC,IAAD,CAAV,GAAmB,KAAnB;AACD;;AACD,eAAO,KAAP;AACD;AA/B8B,KAAhB,CAAjB;AAkCA,WAAO,QAAP;AACD;;AA9K2B,CAA9B;;AAQsB,UAAA,CAAA,CAAnB,SAAS,CAAC,OAAD,CAAU,CAAA,E,2BAAA,E,OAAA,E,KAAmB,CAAnB,CAAA;;AART,iBAAiB,GAAA,UAAA,CAAA,CAL7B,SAAS,CAAC;AACT,EAAA,QAAQ,EAAE,eADD;AAET,EAAA,WAAW,EAAE,4BAFJ;AAGT,EAAA,SAAS,EAAE,CAAC,4BAAD;AAHF,CAAD,CAKoB,CAAA,EAAjB,iBAAiB,CAAjB;SAAA,iB","sourcesContent":["import { Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport {XYZ, Cluster,  Vector as VectorSource} from 'ol/source';\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\nimport * as Proj from 'ol/proj.js';//Converter cordenadas para lat e long\nimport 'ol/ol.css';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Stroke,\n  Style,\n  Text,\n} from 'ol/style';\nimport {boundingExtent} from 'ol/extent';\nimport { UsuarioService } from '../services/usuario.service';\nimport { Overlay } from 'ol';\nimport { MangueiraService } from '../services/mangueira.service';\nimport { ValvulaService } from '../services/valvula.service';\nimport { viacepService } from '../services/viacep.service';\nimport { usuario } from '../models/usuario';\nimport { color } from 'html2canvas/dist/types/css/types/color';\n\n@Component({\n  selector: 'app-tela-mapa',\n  templateUrl: './tela-mapa.component.html',\n  styleUrls: ['./tela-mapa.component.scss']\n})\nexport class TelaMapaComponent implements OnInit {\n\n  constructor(    private usuarioService:UsuarioService, private mangueiraSer: MangueiraService, private valvulasSer: ValvulaService) { }\n\n  ngOnInit(): void {\n  }\n\n \n  @ViewChild(\"popup\") popup!: ElementRef;\n  display:  string = \"none\";\n  clicado: any;\n  overlay!: Overlay;\n  pontos: any;\n  mangueiras: any;\n  valvulas: any;\n  \n  async ngAfterViewInit(){\n\n    this.pontos = await this.usuarioService.list() as any;\n    this.mangueiras = await this.mangueiraSer.list();\n    this.valvulas = await this.valvulasSer.list();\n\n    \n\n    this.overlay = new Overlay({\n      element: this.popup.nativeElement\n    })\n\n    const map = this.MapaCreate();\n    \n\n    this.pontos.forEach((u: any) => {\n\n      u['valvulas'] = this.valvulas.filter((v: any) => v.usuario.id == u.id).map((v: any) => v.dataDeValidade),\n      u['mangueiras'] = this.valvulas.filter((m: any )=> m.usuario.id == u.id).map((m: any )=> m.dataDeValidade)\n      let data = [...u['valvulas'], ...u['mangueiras']].sort()[0]\n      u['dataValidade'] = new Date(data)\n    })\n\n    const umAno = new Date().setFullYear(2020)\n    const doisAnos = new Date().setUTCFullYear(2019)\n\n    const conjuntos = [\n      this.pontos.filter((u: any) => u.dataValidade < umAno),\n      this.pontos.filter((u: any) => u.dataValidade < umAno && u.dataValidade < doisAnos),\n      this.pontos.filter((u: any) => u.dataValidade > doisAnos)\n    ];\n\n\n\n    const colors = [\"red\", \"yellow\", \"green\"]\n\n\n    for(let i = 0; i < conjuntos.length;i++){\n\n        const cluster = this.cluster(conjuntos[i], colors[i]);\n        map.addLayer(cluster);\n        this.cliqueEventMapa(map, cluster);\n\n  }\n  }\n\n\n  private cliqueEventMapa(map: Map, cluster: any) {\n    map.on('click', (evento) => {\n      this.display = 'none'\n      cluster.getFeatures(evento.pixel).then((clickedFeatures: any) => {\n        if (clickedFeatures.length) {\n          const features = clickedFeatures[0].get('features');\n          if (features.length > 1) {\n            const extent = boundingExtent(\n              features.map((r: any) => r.getGeometry().getCoordinates())\n            );\n            map\n              .getView()\n              .fit(extent, { duration: 1000, padding: [50, 50, 50, 50] });\n          }else if(features.length == 1 && this.display == 'none'){\n            this.clicado = features[0].get('pontos')\n            this.display = 'block',\n            this.overlay.setPosition(evento.coordinate)\n          }\n        }\n      });\n    });\n  }\n\n\n  private MapaCreate(){\n\n    const latitude = -48.613666;\n    const longitude = -27.595115\n\n    const raster = new TileLayer({\n      source: new XYZ({\n        url: 'https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}',\n      }),\n    });\n\n    const map = new Map({\n      layers: [raster],\n      target: 'map',\n      overlays: [this.overlay],\n      view: new View({\n        center: Proj.fromLonLat([latitude, longitude]),\n        zoom: 14,\n      }),\n    });\n    return map;\n  }\n\n\n  \n\n  private cluster(pontos: usuario[], color: string){\n    const features: any[] = [];\n    \n    for (let i = 0; i < this.pontos.length; ++i) {\n      const ponto = Proj.fromLonLat([\n        this.pontos[i].longitude,\n        this.pontos[i].latitude,\n      ]);\n    \n      const f = new Feature(new Point(ponto))\n      f.set('pontos', pontos[i]),\n      features.push(f);\n\n    }\n\n    const source = new VectorSource({\n      features: features,\n    });\n\n    const clusterSource = new Cluster({\n      distance: 80,\n      source: source,\n    });\n\n    const styleCache: any = {};\n\n    const clusters = new VectorLayer({\n      source: clusterSource,\n      style: function (feature) {\n        const size = feature.get('features').length;\n        let style = styleCache[size];\n        if (!style) {\n          style = new Style({\n            \n            image: new CircleStyle({\n              \n              radius: 14,\n              \n              stroke: new Stroke({\n                color,\n              }),\n              fill: new Fill({\n                color,\n              }),\n            }),\n            text: new Text({\n              text: size.toString(),\n              fill: new Fill({\n                color: '#fff',\n                \n              }),\n              scale: 1.3,\n            }),\n          });\n          styleCache[size] = style;\n        }\n        return style;\n      },\n    });\n\n    return clusters;\n  }\n\n  \n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}